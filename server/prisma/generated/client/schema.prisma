generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id             Int            @id @default(autoincrement())
  nombre         String
  email          String         @unique
  contraseña    String
  fecha_registro DateTime       @default(now())
  rutinas        Rutina[]
  calendario     Calendario[]
  fotoUrl        String? // Campo opcional para almacenar la URL de la foto de perfil
  contrataciones Contratacion[] // Relación inversa con Contratacion
  plan           String         @default("free") // "free", "basic", "premium"

  // Nuevas relaciones
  userChallenges   UserChallenge[]
  userAchievements UserAchievement[]

  // Relaciones añadidas
  comentarios Comentario[] // Relación con Comentario

  metrics Metric[] // <-- Añade esta línea para la relación inversa

  ejercicios Ejercicio[] // Relación con los ejercicios personalizados
}

model Ejercicio {
  id              Int               @id @default(autoincrement())
  nombre          String
  descripcion     String?
  categoria       String?
  imagenUrl       String?
  esComun         Boolean           @default(true) // True para ejercicios comunes, false para personalizados
  usuarioId       Int? // El ID del usuario que creó el ejercicio personalizado
  usuario         Usuario?          @relation(fields: [usuarioId], references: [id])
  rutinaEjercicio RutinaEjercicio[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([usuarioId])
}

model Rutina {
  id             Int               @id @default(autoincrement())
  nombre         String
  descripcion    String
  usuario        Usuario           @relation(fields: [usuarioId], references: [id])
  usuarioId      Int
  ejercicios     RutinaEjercicio[]
  calendario     Calendario[] // 💡 Esta es la parte que faltaba
  fecha_creacion DateTime          @default(now())
  comentarios    Comentario[]

  // Campos eliminados
  // id          Int          @id @default(autoincrement())
  // nombre      String
  // descripcion String
  // usuarioId   Int
  // usuario     Usuario      @relation(fields: [usuarioId], references: [id])
  // ejercicios  RutinaEjercicio[]
  // likes       Like[]
  // publica     Boolean      @default(false)
  // comentarios Comentario[]
}

model RutinaEjercicio {
  id               Int       @id @default(autoincrement())
  rutina           Rutina    @relation(fields: [rutinaId], references: [id])
  rutinaId         Int
  ejercicio        Ejercicio @relation(fields: [ejercicioId], references: [id])
  ejercicioId      Int
  series           Int
  repeticiones     Int
  descansoSegundos Int
  orden            Int
}

model Calendario {
  id        Int      @id @default(autoincrement())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  rutina    Rutina   @relation(fields: [rutinaId], references: [id])
  rutinaId  Int
  fecha     DateTime
}

model Entrenador {
  id              Int            @id @default(autoincrement())
  nombre          String
  especialidad    String // por ejemplo: "Nutricionista", "Entrenador Personal", etc.
  descripcion     String
  experiencia     Int // años de experiencia
  precio          Float // precio por mes
  fotoUrl         String?
  disponible      Boolean        @default(true)
  calificacion    Float? // calificación promedio
  contrataciones  Contratacion[]
  certificaciones String[] // array de certificaciones
}

model Contratacion {
  id               Int        @id @default(autoincrement())
  usuario          Usuario    @relation(fields: [usuarioId], references: [id])
  usuarioId        Int
  entrenador       Entrenador @relation(fields: [entrenadorId], references: [id])
  entrenadorId     Int
  fechaInicio      DateTime
  fechaFin         DateTime?
  estado           String // "activa", "finalizada", "cancelada"
  planSeleccionado String // "mensual", "trimestral", "anual"
  precio           Float
}

// Modelo de Retos
model Challenge {
  id             Int             @id @default(autoincrement())
  titulo         String
  descripcion    String
  activo         Boolean         @default(true)
  fechaInicio    DateTime
  fechaFin       DateTime
  participantes  Int             @default(0)
  nivel          String // 'Principiante', 'Intermedio', 'Avanzado', 'Todos los niveles'
  tipo           String // 'Fuerza', 'Cardio', 'Flexibilidad', 'Resistencia', 'Equilibrio'
  objetivos      String[]
  recompensa     String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userChallenges UserChallenge[]
}

// Modelo de Participación en Retos
model UserChallenge {
  id             Int      @id @default(autoincrement())
  userId         Int
  challengeId    Int
  progreso       Int      @default(0)
  completado     Boolean  @default(false)
  fechaInicio    DateTime @default(now())
  ultimoProgreso DateTime @default(now())

  user      Usuario   @relation(fields: [userId], references: [id]) // Cambiado a Usuario
  challenge Challenge @relation(fields: [challengeId], references: [id])

  @@unique([userId, challengeId])
}

// Modelo de Logros
model Achievement {
  id               Int               @id @default(autoincrement())
  titulo           String
  descripcion      String
  tipo             String
  icono            String
  criterio         String // 'retos_completados', 'dias_activos', etc.
  valorNecesario   Int
  userAchievements UserAchievement[]
}

// Modelo de Logros de Usuario
model UserAchievement {
  id              Int      @id @default(autoincrement())
  userId          Int
  achievementId   Int
  fechaConseguido DateTime @default(now())

  user        Usuario     @relation(fields: [userId], references: [id]) // Cambiado a Usuario
  achievement Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
}

model Comentario {
  id        Int      @id @default(autoincrement())
  texto     String
  usuarioId Int
  rutinaId  Int
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  rutina    Rutina   @relation(fields: [rutinaId], references: [id])
  creadoEn  DateTime @default(now())
}

model Metric {
  id      Int      @id @default(autoincrement())
  userId  Int
  tipo    String
  valor   Float
  fecha   DateTime
  usuario Usuario  @relation(fields: [userId], references: [id])
}
